import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Configuración básica de la página
st.set_page_config(page_title="Aplicación de Análisis de Datos", layout="wide")

# Función para cargar los datos
@st.cache
def load_data():
    data = pd.read_csv("data/dataset.csv")
    return data

# Lectura de datos
st.title("Análisis de Datos con Streamlit")
st.write("Esta aplicación permite realizar un análisis interactivo de datos.")

data = load_data()

# Mostrar los primeros registros del dataset
st.subheader("Lectura de Datos")
st.write(data.head())

# Resumen de Datos
st.subheader("Resumen de Datos")
st.write(data.describe())

# Visualización de Datos
st.subheader("Visualización de Datos")

st.write("### Gráfico de dispersión")
selected_x_var = st.selectbox("Selecciona la variable X", data.columns)
selected_y_var = st.selectbox("Selecciona la variable Y", data.columns)

fig, ax = plt.subplots()
sns.scatterplot(data=data, x=selected_x_var, y=selected_y_var, ax=ax)
st.pyplot(fig)

# Técnica Estadística: Regresión Lineal
st.subheader("Regresión Lineal")

if st.button("Entrenar Modelo"):
    X = data[[selected_x_var]]
    y = data[selected_y_var]
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    model = LinearRegression()
    model.fit(X_train, y_train)
    
    y_pred = model.predict(X_test)
    
    st.write("### Resultados del Modelo")
    st.write(f"Coeficiente de regresión: {model.coef_[0]}")
    st.write(f"Intercepto: {model.intercept_}")
    st.write(f"Error Cuadrático Medio: {mean_squared_error(y_test, y_pred)}")
    st.write(f"R^2: {r2_score(y_test, y_pred)}")
    
    # Gráfico de regresión
    fig, ax = plt.subplots()
    sns.scatterplot(x=X_test[selected_x_var], y=y_test, ax=ax, label="Datos Reales")
    sns.lineplot(x=X_test[selected_x_var], y=y_pred, ax=ax, color="red", label="Predicción")
    st.pyplot(fig)

# Estilo adicional para una mejor visualización
st.markdown(
    """
    <style>
    .main {
        background-color: #F5F5F5;
    }
    </style>
    """,
    unsafe_allow_html=True
)
